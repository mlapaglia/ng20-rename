name: Publish to NPM

on:
  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Extract version from release tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

          # Determine if this is a prerelease and set the NPM tag
          if [[ $VERSION == *"-alpha"* ]]; then
            NPM_TAG="alpha"
          elif [[ $VERSION == *"-beta"* ]]; then
            NPM_TAG="beta"
          elif [[ $VERSION == *"-rc"* ]]; then
            NPM_TAG="rc"
          elif [[ $VERSION == *"-"* ]]; then
            NPM_TAG="prerelease"
          else
            NPM_TAG="latest"
          fi

          echo "npm_tag=$NPM_TAG" >> $GITHUB_OUTPUT
          echo "NPM tag will be: $NPM_TAG"

      - name: Update package.json version
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version
          echo "Updated package.json to version ${{ steps.version.outputs.version }}"

      - name: Verify version update
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Package version is now: $PACKAGE_VERSION"
          if [ "$PACKAGE_VERSION" != "${{ steps.version.outputs.version }}" ]; then
            echo "Version mismatch! Expected: ${{ steps.version.outputs.version }}, Got: $PACKAGE_VERSION"
            exit 1
          fi

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build package
        run: npm run build

      - name: Publish to NPM with provenance
        run: npm publish --access public --provenance --tag ${{ steps.version.outputs.npm_tag }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Clean up pre-releases for stable releases
        if: steps.version.outputs.npm_tag == 'latest'
        run: |
          echo "🧹 Cleaning up pre-release versions for stable release ${{ steps.version.outputs.version }}"
          
          BASE_VERSION=$(echo "${{ steps.version.outputs.version }}" | sed 's/-.*//')
          echo "Base version: $BASE_VERSION"

          echo "Fetching all releases..."
          gh release list --json tagName,prerelease --limit 100 | jq -r '.[] | select(.prerelease == true and (.tagName | startswith("v'$BASE_VERSION'-"))) | .tagName' > prerelease_tags.txt
          
          if [ -s prerelease_tags.txt ]; then
            echo "Found pre-release tags to clean up:"
            cat prerelease_tags.txt

            while IFS= read -r tag; do
              if [ -n "$tag" ]; then
                echo "Deleting pre-release: $tag"
                gh release delete "$tag" --yes --cleanup-tag
              fi
            done < prerelease_tags.txt
            
            echo "✅ Cleaned up pre-release versions"
          else
            echo "ℹ️ No pre-release versions found for $BASE_VERSION"
          fi
          
          rm -f prerelease_tags.txt
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "🎉 Successfully published @mlapaglia/ng20-rename@${{ steps.version.outputs.version }}"
          echo "📦 NPM tag: ${{ steps.version.outputs.npm_tag }}"
          if [ "${{ steps.version.outputs.npm_tag }}" != "latest" ]; then
            echo "⚠️  This is a prerelease. Install with: npm install @mlapaglia/ng20-rename@${{ steps.version.outputs.npm_tag }}"
          else
            echo "✅ This is a stable release available as 'latest'"
          fi
